{
Example for ECG_3 Click

    Date          : Oct 2018.
    Author        : Nemanja Medakovic

Test configuration FT90x :
    
    MCU                : FT900
    Dev. Board         : EasyFT90x v7 
    FT90x Compiler ver : v2.3.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes peripherals and pins.
- Application Initialization - Initializes SPI interface and performs the all necessary configuration for device
  to work properly.
- Application Task - (code snippet) - Reads ECG Data every 8ms and sends this data to the serial plotter.

Additional Functions :

- void plotECG() - Sends ECG Data to the serial plotter.
- void logRTOR() - Sends Heart Rate and R - R Data to the uart terminal.

}
program Click_ECG_3_FT90x;

uses Click_ECG_3_types, Click_ECG_3_config;

var
    ecgData : uint32_t; 
    rrData : uint16_t; 
    hrData : uint16_t; 
    measTimeCnt : uint32_t; 
    text : array[50] of char; 
    
procedure plotECG(); 
begin
    if (ecgData > 50000) then 
    begin
        LongWordToStr(ecgData, text); 
        mikrobus_logWrite(text, _LOG_TEXT); 
        mikrobus_logWrite(',', _LOG_TEXT); 
        LongWordToStr(measTimeCnt, text); 
        mikrobus_logWrite(text, _LOG_LINE); 
        if (measTimeCnt = 0xFFFFFFFF) then 
        begin
            measTimeCnt := 0; 
        end
        else 
        begin
            inc(measTimeCnt);
        end;
    end; 
    Delay_ms(8); 
end;

procedure logRTOR(); 
begin
    if ((rrData <> 0) and (hrData <> 65535)) then 
    begin
        WordToStr(rrData, text); 
        mikrobus_logWrite('R - R Interval : ', _LOG_TEXT); 
        mikrobus_logWrite(text, _LOG_TEXT); 
        mikrobus_logWrite(' ms', _LOG_LINE); 
        WordToStr(hrData, text); 
        mikrobus_logWrite('Heart Rate : ', _LOG_TEXT); 
        mikrobus_logWrite(text, _LOG_TEXT); 
        mikrobus_logWrite(' BPM', _LOG_LINE); 
    end; 
    Delay_ms(2000); 
end;

procedure systemInit(); 
begin
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_OUTPUT); 
    mikrobus_spiInit(_MIKROBUS1, @_ECG3_SPI_CFG[0]); 
    mikrobus_logInit(_LOG_USBUART, 115200); 
    mikrobus_logWrite('Initializing...', _LOG_LINE); 
    Delay_ms(100); 
end;

procedure applicationInit(); 
begin
    ecg3_spiDriverInit(T_ECG3_P(@_MIKROBUS1_GPIO), T_ECG3_P(@_MIKROBUS1_SPI)); 
    Delay_ms(300); 
    ecg3_swReset(); 
    ecg3_fifoReset(); 
    Delay_ms(100); 
    ecg3_init(); 
    measTimeCnt := 0; 
    Delay_ms(300); 
    mikrobus_logWrite('ECG 3 is initialized', _LOG_LINE); 
    mikrobus_logWrite('', _LOG_LINE); 
end;

procedure applicationTask(); 
begin
    ecg3_getECG(@ecgData); 
    plotECG(); 
end;

begin

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;
end.